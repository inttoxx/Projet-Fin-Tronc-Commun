'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VueRouteMiddleware = function () {

    /**
     * Set instance properties and call defined 
     * middlewares on matching routes
     * 
     * @param {object} definedMiddlewares 
     * @param {object} to 
     * @param {object} from 
     * @param {function|undefined} next
     * 
     * @var {object} middlewares // predefined middlewares
     * @var {boolean} nextHasCalled // if next was called in the middlewares
     * @var {array} toMiddleware // arguments passed to middleware function
     */
    function VueRouteMiddleware(definedMiddlewares, to, from, next) {
        var _this = this;

        _classCallCheck(this, VueRouteMiddleware);

        if (this._isObject(definedMiddlewares)) {
            this.middlewares = definedMiddlewares;
        } else {
            this._error('Defined middlewares must be of type Object!');
            this.middlewares = {};
        }
        this.to = to;
        this.from = from;
        this.next = next;
        this.nextHasCalled = false;
        if (this.to && this.to.matched) {
            // Apply middleware if anu route matched
            to.matched.every(function (route) {
                return _this.applyRouteMiddlewares(route);
            });
        }
        if (this.next && !this.nextHasCalled) {
            // call next if user didnt call it
            this.callNext();
        }
    }

    /**
     * Function used to pass arguments to middlewares with spred syntax
     * 
     * @return {array}
     */


    _createClass(VueRouteMiddleware, [{
        key: 'toMiddleware',
        value: function toMiddleware() {
            return [this.to, this.from, this._isFunction(this.next) ? this.callNext.bind(this) : undefined];
        }

        /**
         * Function that is passed to middleware as a next function wrapper
         * toggling `nextHasCalled` trigger
         * 
         * @param  {...any} args
         */

    }, {
        key: 'callNext',
        value: function callNext() {
            if (!this.nextHasCalled) this.nextHasCalled = true;
            return this.next.apply(this, arguments);
        }
    }, {
        key: 'applyRouteMiddlewares',


        /**
         * Fuction applying middlewares of a single route and deciding
         * if other matched routes should be checked as well
         * 
         * @param {*} route 
         * 
         * @return {boolean}
         */
        value: function applyRouteMiddlewares(route) {
            var _this2 = this;

            if (route.meta && route.meta.middleware) {
                var middlewareKeys = route.meta.middleware;
                if (this._isArray(middlewareKeys)) {
                    return middlewareKeys.every(function (middleware) {
                        return _this2.applyMiddleware(middleware);
                    });
                } else {
                    return this.applyMiddleware(middlewareKeys);
                }
            }
            return true;
        }

        /**
         * Function calling middlewares and deciding if middleware chain
         * must be continued or stopped after first faliure
         * 
         * @param {string|function} middleware 
         * 
         * @return {boolean}
         */

    }, {
        key: 'applyMiddleware',
        value: function applyMiddleware(middleware) {
            var result = this.getMiddleware(middleware).apply(undefined, _toConsumableArray(this.toMiddleware()));
            return result === undefined ? true : result;
        }

        /**
         * Function to get middleware function.
         * In case of function validation failure
         * console the error and return empty function
         * 
         * @param {string|function} middleware 
         * 
         * @return {function}
         */

    }, {
        key: 'getMiddleware',
        value: function getMiddleware(middleware) {
            if (this._isString(middleware)) {
                if (this.middlewares.hasOwnProperty(middleware)) {
                    if (this._isFunction(this.middlewares[middleware])) {
                        return this.middlewares[middleware];
                    } else {
                        this._error(middleware + ' is not a function!');
                    }
                }
            } else if (this._isFunction(middleware)) {
                return middleware;
            } else {
                this._error('All middlewares must be functions!');
            }
            return function () {
                return true;
            };
        }

        /**
         * @param {string} text 
         * 
         * @return {boolean}
         */

    }, {
        key: '_error',
        value: function _error(text) {
            console.error(this.constructor.name + ': ' + text);
        }

        /**
         * @param {*} toCheck 
         * 
         * @return {boolean}
         */

    }, {
        key: '_isString',
        value: function _isString(toCheck) {
            return typeof toCheck === "string" || toCheck instanceof String;
        }

        /**
         * @param {*} toCheck 
         * 
         * @return {boolean}
         */

    }, {
        key: '_isArray',
        value: function _isArray(toCheck) {
            return Array.isArray(toCheck);
        }

        /**
         * @param {*} toCheck 
         * 
         * @return {boolean}
         */

    }, {
        key: '_isFunction',
        value: function _isFunction(toCheck) {
            return typeof toCheck === "function";
        }

        /**
         * @param {*} toCheck 
         * 
         * @return {boolean}
         */

    }, {
        key: '_isObject',
        value: function _isObject(toCheck) {
            return (typeof toCheck === 'undefined' ? 'undefined' : _typeof(toCheck)) === "object" && toCheck !== null;
        }
    }]);

    return VueRouteMiddleware;
}();

;

exports.default = function () {
    var definedGroups = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    return function () {
        for (var _len = arguments.length, toMiddleware = Array(_len), _key = 0; _key < _len; _key++) {
            toMiddleware[_key] = arguments[_key];
        }

        return new (Function.prototype.bind.apply(VueRouteMiddleware, [null].concat([definedGroups], toMiddleware)))();
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,